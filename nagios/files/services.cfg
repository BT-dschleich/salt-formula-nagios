# Managed by SaltStack
{%- from "nagios/map.jinja" import server with context %}
{% set default_service = {
  'active_checks_enabled': 1,
  'passive_checks_enabled': 1,
  'parallelize_check': 1,
  'obsess_over_service': 1,
  'check_freshness': 0,
  'notifications_enabled': 1,
  'event_handler_enabled': 1,
  'flap_detection_enabled': 1,
  'failure_prediction_enabled': 1,
  'process_perf_data': 1,
  'retain_status_information': 1,
  'retain_nonstatus_information': 1,
  'register': 1,
  'notification_interval': 0,
  'is_volatile': 0,
  'check_period': '24x7',
  'normal_check_interval': 5,
  'retry_check_interval': 1,
  'max_check_attempts': 4,
  'notification_period': '24x7',
  'notification_options': 'w,u,c,r',
  'contact_groups': server.default_contact_group,
} -%}

{% for service_id, service in services.items() %}
# {{ service_id }}
define service {
{%- if not service.get('use', False) or service.get('register', 1) == 0 -%}
  {# service template #}
  name {{ service.get('name', service_id) }}
  register 0
  active_checks_enabled {{ service.get('active_checks_enabled', default_service.active_checks_enabled ) }}
  passive_checks_enabled {{ service.get('passive_checks_enabled', default_service.passive_checks_enabled ) }}
  parallelize_check {{ service.get('parallelize_check', default_service.parallelize_check ) }}
  obsess_over_service {{ service.get('obsess_over_service', default_service.obsess_over_service ) }}
  check_freshness {{ service.get('check_freshness', default_service.check_freshness ) }}
  notifications_enabled {{ service.get('notifications_enabled', default_service.notifications_enabled ) }}
  event_handler_enabled {{ service.get('event_handler_enabled', default_service.event_handler_enabled ) }}
  flap_detection_enabled {{ service.get('flap_detection_enabled', default_service.flap_detection_enabled ) }}
  failure_prediction_enabled {{ service.get('failure_prediction_enabled', default_service.failure_prediction_enabled ) }}
  process_perf_data {{ service.get('process_perf_data', default_service.process_perf_data ) }}
  retain_status_information {{ service.get('retain_status_information', default_service.retain_status_information ) }}
  retain_nonstatus_information {{ service.get('retain_nonstatus_information', default_service.retain_nonstatus_information ) }}
  notification_interval {{ service.get('notification_interval', default_service.notification_interval ) }}
  is_volatile {{ service.get('is_volatile', default_service.is_volatile ) }}
  check_period {{ service.get('check_period', default_service.check_period ) }}
  normal_check_interval {{ service.get('normal_check_interval', default_service.normal_check_interval ) }}
  retry_check_interval {{ service.get('retry_check_interval', default_service.retry_check_interval ) }}
  max_check_attempts {{ service.get('max_check_attempts', default_service.max_check_attempts ) }}
  notification_period {{ service.get('notification_period', default_service.notification_period ) }}
  notification_options {{ service.get('notification_options', default_service.notification_options ) }}
{#- Extra properties -#}
{%- for propertie, value in service.items() -%}
  {%- if propertie not in default_service.keys() and propertie not in ['use', 'register', 'name', 'service_description', 'host_name', 'contacts', 'contact_groups', 'check_command', 'target'] %}
  {{ propertie }} {{value}}
  {%- endif -%}
{% endfor %}

{%- else -%}

  {% if service.get('use', False) %}
  use {{ service.use }}
  {% endif %}
  register 1
  service_description {{ service.get('service_description', service_id) }}
  host_name {{ service.host_name }}
  check_command {{ service.check_command }}
{#- Extra properties -#}
{%- for propertie, value in service.items() -%}
  {%- if propertie not in ['use', 'register', 'service_description', 'host_name', 'contacts', 'contact_groups', 'check_command', 'target', 'name'] %}
  {{ propertie }} {{value}}
  {%- endif -%}
{% endfor %}
{% endif -%}

{%- if service.get('contacts', False) -%}
{%- if service.contacts is string %}
  contacts {{ service.contacts }}
{%- elif service.contacts is iterable %}
  contacts {{ service.contacts|join(',') }}
{% endif %}
{%- endif -%}

{%- if service.get('contact_groups', False) -%}
{%- if service.contact_groups is string %}
  contact_groups {{ service.contact_groups }}
{%- elif service.contact_groups is iterable %}
  contact_groups {{ service.contact_groups|join(',') }}
{% endif %}
{% endif %}
}
{% endfor %}
